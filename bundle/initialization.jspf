<%-- Load Java libraries, Kinetic models & Identity --%>
<%@page pageEncoding="UTF-8" trimDirectiveWhitespaces="true"%>
<%@page import="java.util.*" %>
<%@page import="com.kineticdata.core.models.*" %>
<%@page import="com.kineticdata.core.web.bundles.Bundle" %>
<%@page import="com.kineticdata.core.web.bundles.BundleSubmissionComponent" %>
<%@page import="com.kineticdata.core.authentication.Identity" %>
<%@page import="java.time.ZoneId"%>

<%@page import="org.slf4j.Logger" %>
<%@page import="java.io.*,javax.servlet.http.*"%>
 


<%-- Bundle Java libraries --%>
<%@page import="com.kineticdata.bundles.*" %>

<%-- Load tag libraries (JSTL) used in most bundles --%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@taglib prefix="app" uri="http://kineticdata.com/taglibs/core/app" %>
<%@taglib prefix="bundle" uri="http://kineticdata.com/taglibs/bundle" %>
<%@taglib prefix="json" uri="http://kineticdata.com/taglibs/json" %>

<%@include file="/WEB-INF/app/includes/task4/task4.jspf" %>

<%-- Initialize the default zoneId and locale --%>
<%
    request.setAttribute("zoneId", ZoneId.systemDefault());
    request.setAttribute("locale", Locale.US);
%>

<%-- Get bundle, space, and kapp objects --%>
<%
    Bundle bundle = (Bundle)request.getAttribute("bundle");
    Space space = (Space)request.getAttribute("space");
    Kapp kapp = (Kapp)request.getAttribute("kapp");
    Identity identity = (Identity)request.getAttribute("identity");
%>

<%-- SetupHelper --%>
<%@include file="SetupHelper.jspf"%>
<%
    SetupHelper setupHelper = new SetupHelper()
        .addSetupAttribute("Task Server Url",
            "Task Server Url Description",
            false)
        .addSetupAttribute("Task Source Name",
            "Task Source Name Description",
            false);
        request.setAttribute("SetupHelper", setupHelper);
%>

<%-- Load helper(s) --%>
<%
    request.setAttribute("json", new com.kineticdata.bundles.JsonHelper());
    request.setAttribute("text", new com.kineticdata.bundles.TextHelper());
    request.setAttribute("time", new com.kineticdata.bundles.TimeHelper());
%>

<%-- RKM Helpers--%>
<%@include file="RKMArticleSearchHelper.jspf"%>
<%@include file="RKMArticleDetailHelper.jspf"%>
<%@include file="RKMIconHelper.jspf"%>
<%@include file="RelevanceHelper.jspf"%>
<%
    // Create an ARServerUser instance that will be used as an admin proxy user
    // to make calls the current authenticated user may not be able to.  This is
    // necessary because this package requires a direct sql call which requires
    // admin access. The authentication information for this user is defined via
    // bundle properties but the username and password default to the default
    // helper context of the kinetic request server.
    final com.bmc.arsys.api.ARServerUser systemUser =
        new com.bmc.arsys.api.ARServerUser(
            kapp.getAttributeValue("RKM Admin Username"),
            kapp.getAttributeValue("RKM Admin Password"),
            kapp.getAttributeValue("RKM Locale"),
            kapp.getAttributeValue("RKM Server")
        );
    systemUser.setPort(3000);
    systemUser.login();
    request.setAttribute("systemUser", systemUser); // TODO: Remove after helpers accept constructor argument

    request.setAttribute("RKMArticleSearchHelper",
        new RKMArticleSearchHelper());//, systemUser));
    request.setAttribute("RKMArticleDetailHelper",
        new RKMArticleDetailHelper());//, systemUser));
    request.setAttribute("RKMIconHelper",
        new RKMIconHelper());//, systemUser));
%>

<%-- FilehubHelper --%>
<%@include file="FilehubHelper.jspf"%>
<%
    // Add the "Filehub Url" setup attribute
    setupHelper
        .addSetupAttribute(
            "Filehub Url",
            "The URL to the Kinetic Filehub application (https://acme.com/kinetic-filehub)",
            request.getParameter("filestore") != null);
    // Declare the filehubHelper, which is referenced in the router.jspf file
    FilehubHelper filehubHelper = null;
    // If the request is scoped to a specific Kapp (space display pages are not)
    if (kapp != null && kapp.hasAttribute("Filehub Url")) {
        // Initialize the filehub helper
        filehubHelper = new FilehubHelper(kapp.getAttributeValue("Filehub Url"));

        // Add the "RKM" filestore setup attributes
        setupHelper
            .addSetupAttribute(
                "RKM Filestore Slug",
                "The slug of the desired filestore configured in Kinetic Filehub.",
                false)
            .addSetupAttribute(
                "RKM Filestore Key",
                "The key for an access key associated to the specified filestore.",
                false)
            .addSetupAttribute(
                "RKM Filestore Secret",
                "The secret associated to the specified key.",
                false);
        // Initialize the "RKM" filestore
        if (kapp.hasAttribute("RKM Filestore Slug")) {
            filehubHelper.addFilestore(
                kapp.getAttributeValue("RKM Filestore Slug"),
                kapp.getAttributeValue("RKM Filestore Key"),
                kapp.getAttributeValue("RKM Filestore Secret"),
                new FilehubHelper.Authorizer() {
                    @Override public boolean canAccess(HttpServletRequest request) {
                        boolean result = false;
                        String form = request.getParameter("form");
                        String entryId = request.getParameter("entry");
                        String field = request.getParameter("field");
                        if (
                            form != null && entryId != null && field != null
                            && field.matches("\\d+")
                        ) {
                            int fieldId = Integer.valueOf(field);
                            try {
                                // Create a new impersonated user
                                com.bmc.arsys.api.ARServerUser impersonatedUser =
                                    new com.bmc.arsys.api.ARServerUser(
                                        systemUser.getUser(),
                                        systemUser.getPassword(),
                                        systemUser.getLocale(),
                                        systemUser.getServer()
                                    );
                                // impersonatedUser.setPort(systeUser.getPort());
                                impersonatedUser.setImpersonatedUser(((Identity)request.getAttribute("identity")).getUsername());
                                com.bmc.arsys.api.Entry entry = impersonatedUser.getEntry(form, entryId, new int[] {fieldId});
                                if (entry != null && entry.get(fieldId) != null) {
                                    result = true;
                                }
                            } catch (Exception e) {
                                ((Bundle)request.getAttribute("bundle")).getLogger().debug("Unable to retrieve entry.", e);
                            }
                        }
                        return result;
                    }
                },
                new FilehubHelper.PathBuilder() {
                    @Override public String buildPath(HttpServletRequest request) {
                        //return request.getParameter("path");
                        String path = request.getParameter("form")+
                            "/"+request.getParameter("entry")+
                            "/"+request.getParameter("field");
                        if (request.getParameter("filename") != null) {
                            path += "/"+request.getParameter("filename");
                        }
                        return path;
                    }
                }
            );
        }
    }
%>
