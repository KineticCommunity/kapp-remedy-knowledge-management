<%-- Load Java libraries, Kinetic models & Identity --%>
<%@page pageEncoding="UTF-8" trimDirectiveWhitespaces="true"%>
<%@page import="java.util.*" %>
<%@page import="com.kineticdata.core.models.*" %>
<%@page import="com.kineticdata.core.web.bundles.Bundle" %>
<%@page import="com.kineticdata.core.web.bundles.BundleSubmissionComponent" %>
<%@page import="com.kineticdata.core.authentication.Identity" %>
<%@page import="org.slf4j.Logger" %>
<%@page import="java.io.*,javax.servlet.http.*"%>

<%-- Bundle Java libraries --%>
<%@page import="com.kineticdata.bundles.*" %>

<%-- Load tag libraries (JSTL) used in most bundles --%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@taglib prefix="app" uri="http://kineticdata.com/taglibs/core/app" %>
<%@taglib prefix="bundle" uri="http://kineticdata.com/taglibs/bundle" %>
<%@taglib prefix="json" uri="http://kineticdata.com/taglibs/json" %>

<%@include file="/WEB-INF/app/includes/task4/task4.jspf" %>
<%@include file="SubmissionHelper.jspf"%>
<%@include file="SetupHelper.jspf"%>
<%@include file="CategoryHelper.jspf"%>
<%@include file="IconHelper.jspf"%>
<%@include file="RKMHelper.jspf"%>
<%@include file="ResponseHelper.jspf"%>
<%@include file="HtmlHelper.jspf"%>

<%-- Get bundle, space, and kapp objects --%>
<%
    Bundle bundle = (Bundle)request.getAttribute("bundle");
    Space space = (Space)request.getAttribute("space");
    Kapp kapp = (Kapp)request.getAttribute("kapp");
    Identity identity = (Identity)request.getAttribute("identity");
%>

<%-- Define and initialize SetupAttribute helper --%>
<%
    SetupHelper setupHelper = new SetupHelper()
        .addSetupAttribute("Task Server Url",
            "Task Server Url Description",
            false)
        .addSetupAttribute("Task Source Name",
            "Task Source Name Description",
            false);
%>

<%--
    Create an ARServerUser instance that will be used as an admin proxy user to
    make calls the current authenticated user may not be able to.  This is
    necessary because this package requires a direct sql call which requires
    admin access. The authentication information for this user is defined via
    bundle properties but the username and password default to the default
    helper context of the kinetic request server.
--%>
<%
    com.bmc.arsys.api.ARServerUser systemUser = new com.bmc.arsys.api.ARServerUser("Demo", "", "en", "emu.kineticdata.com");
        // kapp.getAttributeValue("rkmAdminUsername"),
        // kapp.getAttributeValue("rkmAdminPassword"),
        // kapp.getAttributeValue("rkmLocale"),
        // kapp.getAttributeValue("rkmServer"));
        // serverUser.setPort(Integer.parseInt(kapp.getAttributeValue("rkmPort")));
        // systemUser.login();
        systemUser.setPort(3000);
        systemUser.login();
        systemUser.setImpersonatedUser(identity.getUsername());
        // systemUser.setImpersonatedUser("testUser");
%>

<%-- Load helper(s) --%>
<%
  request.setAttribute("json", new com.kineticdata.bundles.JsonHelper());
  request.setAttribute("text", new com.kineticdata.bundles.TextHelper());
  request.setAttribute("time", new com.kineticdata.bundles.TimeHelper());
  request.setAttribute("SubmissionHelper", new SubmissionHelper(request));
  request.setAttribute("CategoryHelper", new CategoryHelper());
  request.setAttribute("SetupHelper", setupHelper);
  request.setAttribute("IconHelper", new IconHelper(request));
  request.setAttribute("RKMHelper", new RKMHelper(request));
  request.setAttribute("HtmlHelper", new HtmlHelper(request));
  request.setAttribute("systemUser", systemUser);
%>

<%--
    Define Result Types for requesting RKM data
    Result Types: What format the data should be returned in.
        RESULT: Returns only the formatted data
        SEARCH: Returns the formatted data with title and search bar
        CONTAINER: Returns the entire page with the container (Default)
--%>
<%!
  public enum RKMResultType {
    RESULT("result"), SEARCH("search"), CONTAINER("container");

    private final String value;
    RKMResultType(String value) {
        this.value = value;
    }
    public String valueOf() {
        return value;
    }
    public static RKMResultType getByValue(String value){
    	if (value != null){
	        for(RKMResultType resultType : values()){
	            if( resultType.valueOf().equals(value.toLowerCase())){
	                return resultType;
	            }
	        }
    	}
        return CONTAINER;
    }
    public Boolean equals(RKMResultType resultType){
    	if (resultType != null){
    		return this.value.equals(resultType.valueOf());
    	}
    	return false;
    }
	}
%>

<%-- FilehubHelper --%>
<%@include file="FilehubHelper.jspf"%>
<%
    // Add the "Filehub Url" setup attribute
    setupHelper
        .addSetupAttribute(
            "Filehub Url",
            "The URL to the Kinetic Filehub application (https://acme.com/kinetic-filehub)",
            request.getParameter("filestore") != null);
    // Declare the filehubHelper, which is referenced in the router.jspf file
    FilehubHelper filehubHelper = null;
    // If the request is scoped to a specific Kapp (space display pages are not)
    if (kapp != null && kapp.hasAttribute("Filehub Url")) {
        // Initialize the filehub helper
        filehubHelper = new FilehubHelper(kapp.getAttributeValue("Filehub Url"));

        // Add the "RKM" filestore setup attributes
        setupHelper
            .addSetupAttribute(
                "RKM Filestore Slug",
                "The slug of the desired filestore configured in Kinetic Filehub.",
                false)
            .addSetupAttribute(
                "RKM Filestore Key",
                "The key for an access key associated to the specified filestore.",
                false)
            .addSetupAttribute(
                "RKM Filestore Secret",
                "The secret associated to the specified key.",
                false);
        // Initialize the "RKM" filestore
        if (kapp.hasAttribute("RKM Filestore Slug")) {
            filehubHelper.addFilestore(
                kapp.getAttributeValue("RKM Filestore Slug"),
                kapp.getAttributeValue("RKM Filestore Key"),
                kapp.getAttributeValue("RKM Filestore Secret"),
                new FilehubHelper.Authorizer() {
                    @Override public boolean canAccess(HttpServletRequest request) {
                      // systemUser.setImpersonatedUser(identity.getUsername());
                        return true;
                    }
                },
                new FilehubHelper.PathBuilder() {
                    @Override public String buildPath(HttpServletRequest request) {
                        //return request.getParameter("path");
                        String path = request.getParameter("form")+
                            "/"+request.getParameter("entry")+
                            "/"+request.getParameter("field");
                        if (request.getParameter("filename") != null) {
                            path += "/"+request.getParameter("filename");
                        }
                        return path;
                    }
                }
            );
        }
    }
%>
